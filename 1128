#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_N 2000

int adj[MAX_N + 1][MAX_N + 1];
int adjT[MAX_N + 1][MAX_N + 1];
int visited[MAX_N + 1];
int N, M;

void dfs(int v, int graph[MAX_N + 1][MAX_N + 1]) {
    visited[v] = 1;
    for (int i = 1; i <= N; i++) {
        if (graph[v][i] && !visited[i]) {
            dfs(i, graph);
        }
    }
}

int isConnected() {
    memset(visited, 0, sizeof(visited));
    dfs(1, adj);
    for (int i = 1; i <= N; i++) {
        if (!visited[i]) return 0;
    }
    
    memset(visited, 0, sizeof(visited));
    dfs(1, adjT);
    for (int i = 1; i <= N; i++) {
        if (!visited[i]) return 0;
    }
    
    return 1;
}

int main() {
    while (1) {
        scanf("%d %d", &N, &M);
        if (N == 0 && M == 0) break;
        
        memset(adj, 0, sizeof(adj));
        memset(adjT, 0, sizeof(adjT));
        
        for (int i = 0; i < M; i++) {
            int V, W, P;
            scanf("%d %d %d", &V, &W, &P);
            adj[V][W] = 1;
            adjT[W][V] = 1;
            if (P == 2) {
                adj[W][V] = 1;
                adjT[V][W] = 1;
            }
        }
        
        printf("%d\n", isConnected());
    }
    return 0;
}
