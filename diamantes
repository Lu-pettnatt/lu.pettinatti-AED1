#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_EXPR 1000

typedef struct {
    int top;
    int capacity;
    char *data;
} Stack;


Stack* createStack(int capacity) {
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    stack->data = (char *)malloc(capacity * sizeof(char));
    stack->top = -1;
    stack->capacity = capacity;
    return stack;
}

int isEmpty(Stack *stack) {
    return stack->top == -1;
}


void push(Stack *stack, char value) {
    if (stack->top < stack->capacity - 1) {
        stack->data[++stack->top] = value;
      }
}


char pop(Stack *stack) {
    if (!isEmpty(stack)) {
        return stack->data[stack->top--];
    }
    return '\0'; 
}


void freeStack(Stack *stack) {
    free(stack->data);
    free(stack);
}


int countDiamonds(const char *expression) {
    Stack *stack = createStack(strlen(expression)); 
    int diamondCount = 0;

    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == '<') {
            push(stack, '<'); 
        } else if (expression[i] == '>') {
            if (!isEmpty(stack)) {
                pop(stack); 
                diamondCount++; 
            }
        }
        
    }

    freeStack(stack); 
    return diamondCount
      }

int main() {
    int N;
    char expression[MAX_EXPR];

    
    scanf("%d", &N);
    getchar(); 

    for (int i = 0; i < N; i++) {
        fgets(expression, MAX_EXPR, stdin);
        expression[strcspn(expression, "\n")] = '\0';

        
        printf("%d\n", countDiamonds(expression));
    }

    return 0;
}
